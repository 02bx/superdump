@model SuperDumpService.ViewModels.ReportViewModel
@using SuperDumpService.Helpers
@using SuperDumpService.Models
@using SuperDumpService.ViewModels

@{
	ViewData["Title"] = "Report";
}
@if (Model == null) {
	<h2>Requested dump does not exist.</h2>
	<p>... but might get created in a few seconds...</p>

	<script>
		setTimeout(function () {
			window.location.reload(1);
		}, 5000);
	</script>

} else {
	<h2>Dump Id: @Model.DumpId</h2>

	<div style="display: block; float: right;">
		@using (Html.BeginForm("Rerun", "Home")) {
			<input type="hidden" name="bundleId" value="@Model.BundleId" />
			<input type="hidden" name="dumpId" value="@Model.DumpId" />
			<input type="submit" value="Rerun Analysis" />
		}
		@using (Html.BeginForm("TriggerSimilarityAnalysis", "Similarity")) {
			<input type="hidden" name="bundleId" value="@Model.BundleId" />
			<input type="hidden" name="dumpId" value="@Model.DumpId" />
			<input type="submit" value="Trigger Duplicate Detection" />
		}
		<ul>
			@foreach (var rel in Model.Relationships.OrderByDescending(x => x.CrashSimilarity.OverallSimilarity)) {
			<li>
				<a asp-controller="Home" asp-action="Report" asp-route-bundleId="@rel.DumpB.BundleId" asp-route-dumpId="@rel.DumpB.DumpId">@rel.DumpB</a> @Math.Round(rel.CrashSimilarity.OverallSimilarity * 100.0, 0) &#37;
			</li>
			}
		</ul>
	</div>

		<dl class="dl-horizontal smaller">
			@if (!string.IsNullOrEmpty(Model.BundleFileName) && Model.BundleFileName != Model.DumpFileName) {
				<dt>BundleFileName:</dt>
				<dd>@Model.BundleFileName</dd>
			}
			@if (!string.IsNullOrEmpty(Model.DumpFileName)) {
				<dt>DumpFileName:</dt>
				<dd>@Model.DumpFileName (
				<interactive-link  model="@(Model)">
					Start interactive session
				</interactive-link>
				)</dd>
			}

			<dt>Time:</dt>
			<dd>@Model.TimeStamp</dd>

			@foreach (var customProp in Model.CustomProperties) {
				<dt>
					@customProp.Key:
				</dt>
				<dd>
					<possible-link href="@customProp.Value" is-external="true"> @customProp.Value </possible-link>
				</dd>
			}

			<dt>Files:</dt>
			<dd>
				<div class="filegroups">
					@{ var sequence = new List<string> { "Primary Dump", "Other files", "Results", "Metadata", "Logs" }; }
					@foreach (var filetype in Model.Files.Select(x => Utility.GetEnumDescription(x.FileEntry.Type)).Distinct()
					.OrderBy(x => sequence.IndexOf(x) < 0 ? int.MaxValue : sequence.IndexOf(x))) { // somewhat ugly hack to control the order of file categories
						<dl class="dl-horizontal filegroup filegroup-@filetype.ToString().Replace(" ", "_")">
						<dt class="filesize">@filetype.ToString()</dt>
						<dd class="">
							<ul class="flat">
								@foreach (SDFileInfo file in Model.Files.Where(x => Utility.GetEnumDescription(x.FileEntry.Type) == filetype).OrderBy(x => x.FileEntry.FileName)) {
									<li>
										@{Html.RenderPartial("_File", new FileViewModel(Model.BundleId, Model.DumpId, file));}
									</li>
											}
							</ul>
						</dd>
				</dl>
					}
				</div>
			</dd>
		</dl>

		<div class="container-fluid">
			@if (Model.HasAnalysisFailed) {
				<h2>Analysis failed with errors, no report avaliable.</h2>
				<pre>Error: @Model.AnalysisError</pre>
			} else if (Model.Result == null) {
				if (Model.CustomTextResult != null) {
					@if (string.IsNullOrEmpty(Model.SDResultReadError)) {
						<p>SuperDump Model is null for unknown reason. Falling back to CustomTextResult.</p>
					} else {
						<p>SuperDump Model is null, because of error:</p>
						<pre>@Model.SDResultReadError</pre>
						<p>Falling back to CustomTextResult.</p>
					}
					<section>
						<pre>@Model.CustomTextResult</pre>
					</section>
				} else {
					<h2>hang tight, still processing</h2>
					<script>
						setTimeout(function () {
							window.location.reload(1);
						}, 5000);
					</script>
				}
			} else {
				<section>
					@{Html.RenderPartial("_Summary");}
				</section>
				<section>
					@{Html.RenderPartial("_System");}
				</section>
				<section>
					@{Html.RenderPartial("_Threads");}
				</section>
				<section>
					@{Html.RenderPartial("_Modules");}
				</section>
				<section>
					@{ Html.RenderPartial("_Domains");}
				</section>
				<section>
					@{Html.RenderPartial("_Memory");}
				</section>
						}
		</div>
						}
